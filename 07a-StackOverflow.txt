library(runjags)
library(coda)
rjags::load.module("glm")
library(akit2)

so = read.csv('C:\\Users\\Dominik\\Downloads\\StackOverflow-LV\\StackOverflow-survey.csv')

# YearsProgram als metrische Zahl
levels(so$YearsProgram)

 [1] "1 to 2 years"     "10 to 11 years"   "11 to 12 years"   "12 to 13 years"   "13 to 14 years"  
 [6] "14 to 15 years"   "15 to 16 years"   "16 to 17 years"   "17 to 18 years"   "18 to 19 years"  
[11] "19 to 20 years"   "2 to 3 years"     "20 or more years" "3 to 4 years"     "4 to 5 years"    
[16] "5 to 6 years"     "6 to 7 years"     "7 to 8 years"     "8 to 9 years"     "9 to 10 years"   
[21] "Less than a year"

so$YearsProgram.num = strtoi(sub(" .*", "", so$YearsProgram)) + 0.5
so$YearsProgram.num[is.na(so$YearsProgram.num)] = 0.5

table(so$YearsProgram.num)

 0.5  1.5  2.5  3.5  4.5  5.5  6.5  7.5  8.5  9.5 10.5 11.5 12.5 13.5 14.5 15.5 16.5 17.5 18.5 19.5 
  30   96  186  307  376  380  328  346  286  491  361  225  244  191  332  294  162  184  106  187 
20.5 
1431

hist(so$YearsProgram.num)

hist(so$Salary)

# Levels der FirmengrÃ¶Ãe in hÃ¼bsche Reihenfolge bringen
levels(so$CompanySize)
so$CompanySize = factor(so$CompanySize, levels = c(
  "I don't know",
  "I prefer not to answer",
  "Fewer than 10 employees",
  "10 to 19 employees",
  "20 to 99 employees",
  "100 to 499 employees",
  "500 to 999 employees",
  "1,000 to 4,999 employees",
  "5,000 to 9,999 employees",
  "10,000 or more employees"))

de= so[so$Country=='Germany',]
hist(de$Salary)

# Wir entfernen alle Werte die zu niedrig sind
de = de[de$Salary > 15000,]

# Salary ~ YearsProgram
modell1 = "
model {
  for (i in 1:590) {
    Salary[i] ~ dnorm(intercept + beta.year * YearsProgram.num[i], 1/sigma^2)
  }
  # intercept kann auch negativ sein
  # Abschätzung: view(de$Salary) max Wert = 140000
  # Doppelte davon also nehmen wir 300000
  intercept~dnorm(0, 1/300000^2)
  # Abschätzung: sd(de$Salary) / sd(de$YearsProgram.num)
  beta.year~dnorm(0, 1/3000^2)
  # Abschätzung: sd(de$Salary)
  sigma~ dexp(3/25000)
}

fit1 = run.jags(modell1, data=de, monitor=c('intercept', 'beta.year', 'sigma'), n.chains=3)

view(fit1)
               Mean        SD   Lower95   Upper95 MC%ofSD SSeff
intercept 37958.700 1742.2899 34545.762 41367.237     0.6 31753
beta.year  1324.555  120.0740  1090.485  1558.792     0.6 30497
sigma     15981.013  467.8565 15064.603 16891.737     0.7 18363

#MC%ofSD sind der Fehlerprozent und ist hier weit unter 2% die wird erreichen sollten - ALso gut!

diagMCMC(fit1$mcmc, 'beta.year')
# Ist eine sehr schöne Diagnose.

samples1=as.matrix(fit1$mcmc)
dim(samples1)
[1] 30000     3

dimnames(samples1)
[[1]]
NULL

[[2]]
[1] "intercept" "beta.year" "sigma"

hist(samples1[,'beta.year'])
#Da es ein Vektor ist funktioniert $ nicht. Wir müssen mit [] arbeiten.

plotPost(samples1[,'beta.year'])
              ESS     mean   median     mode hdiMass   hdiLow  hdiHigh compVal pGtCompVal ROPElow
Param. Val. 30000 1324.555 1324.649 1325.529    0.95 1090.485 1558.792      NA         NA      NA
            ROPEhigh pLtROPE pInROPE pGtROPE
Param. Val.       NA      NA      NA      NA

#Das sind echte Vorhersagen nun.

mean(samples1[,'beta.year'] > 1500)
[1] 0.07253333
# Chance das ein Wert über 1500 liegt ist also 7%

# Neues Modell2

levels(de$CompanySize)
 [1] "I don't know"             "I prefer not to answer"   "Fewer than 10 employees" 
 [4] "10 to 19 employees"       "20 to 99 employees"       "100 to 499 employees"    
 [7] "500 to 999 employees"     "1,000 to 4,999 employees" "5,000 to 9,999 employees"
[10] "10,000 or more employees"
# Haben 10 verschiedene

de$CompanySize.int=as.integer(de$CompanySize)
#Müssen die Gruppen in integer umwandeln damit wir durch eine for Schleife die Werte verarbeiten können.

modell2 = "
model {
  for (i in 1:590) {
    Salary[i] ~ dnorm(mu[i], 1/sigma^2)
    mu[i] <- int.company[CompanySize.int[i]] + beta.year * YearsProgram.num[i]
  }
  for (i in 1:10) {
    int.company[i] ~ dnorm(0, 1/100000^2)
  }
  intercept~dnorm(0, 1/300000^2)
  # Abschätzung: sd(de$Salary) / sd(de$YearsProgram.num)
  beta.year~dnorm(0, 1/3000^2)
  # Abschätzung: sd(de$Salary)
  sigma~ dexp(3/25000)
}
"

fit2=run.jags(modell2, data=de, monitor = c('int.company', 'beta.year', 'sigma'))

view(fit2)
                     Mean         SD   Lower95   Upper95 MC%ofSD SSeff
int.company[1]  48634.255  7992.7521 32741.667 63788.577     0.7 20355
int.company[2]  42253.921 15633.2129 11784.644 73091.950     0.7 20000
int.company[3]  29873.187  2712.4373 24698.590 35287.062     0.7 20000
int.company[4]  33773.825  2471.0525 29123.896 38721.250     0.7 20000
int.company[5]  36958.194  1986.1523 33120.710 40931.467     0.7 20000
int.company[6]  38827.481  2059.1799 34842.820 42872.051     0.7 20000
int.company[7]  42768.017  2963.2707 37164.945 48714.070     0.7 20443
int.company[8]  39198.294  2558.7197 34083.903 44172.208     0.7 20000
int.company[9]  45626.734  4465.9819 36673.462 54143.979     0.7 20516
int.company[10] 45612.475  2545.5782 40667.895 50619.619     0.7 20340
beta.year        1298.017   118.4677  1065.715  1530.556     0.7 19652
sigma           15519.445   458.5218 14621.297 16409.285     0.9 11553

# Wir haben nun 10 intercept Werte!
# MC%ofSD ist wieder weit unter 2%. Sehr gut!

samples2=as.matrix(fit2$mcmc)
plotPost(samples2[,'beta.year'], cenTend = 'mean')
plotcoef(fit2)
# Hier sehen wir auf einem Blick wo ca. alle Werte sind

plotcoef(fit2, 'company')
# Nur unsere 10 intercepts die wir genommen haben.

levels(de$CompanySize)
# Gruppe 1-10

diff.klein.gross=samples2[,'int.company[10]'] - samples2[,'int.company[5]']
plotPost(diff.klein.gross, compVal = 10000)
# Wenn man von einer kleinen Firma in eine große wechselt liegt die Chance mehr als 10000 zu verdienen liegt bei 27,8%!

# Neues Modell3

modell3 = "
model {
  for (i in 1:590) {
    Salary[i] ~ dnorm(mu[i], 1/sigma^2)
    mu[i] <- int.company[CompanySize.int[i]] + beta.year * YearsProgram.num[i]
    
    # Vorhersage (predict)
    y.hat[i] ~ dnorm(mu[i], 1/sigma^2)
  }
  for (i in 1:10) {
    int.company[i] ~ dnorm(0, 1/100000^2)
  }
  # Abschätzung: sd(de$Salary) / sd(de$YearsProgram.num)
  beta.year~dnorm(0, 1/3000^2)
  # Abschätzung: sd(de$Salary)
  sigma~ dexp(3/25000)
}
"

fit3=run.jags(modell3, data=de, monitor = c('y.hat'), n.chains=3)

samples3=as.matrix(fit3$mcmc)
dim(samples3)
[1] 30000   590

plotPost(samples3[,100], compVal = de$Salary[100])
              ESS     mean   median     mode hdiMass   hdiLow  hdiHigh  compVal pGtCompVal ROPElow
Param. Val. 30000 45935.18 45991.78 46304.18    0.95 15093.89 76268.23 23655.91  0.9222333      NA
            ROPEhigh pLtROPE pInROPE pGtROPE
Param. Val.       NA      NA      NA      NA

plotPost(samples3[,100], compVal = de$Salary[100])

# posterior predictiv check
par(mfrow=c(3,3))
hist(de$Salary, col="darkblue")
for (i in 1:8) {
  hist(samples3[i*1000,], col="lightblue")
}
# Unsere 8 Zufalls generierten sind Gleichverteilt weil wir das im Modell so angegeben haben.
# Sieht man in Zeile 116

sample3.means = rowMeans(samples3)
plotPost(sample3.means, compVal = mean(de$Salary))
# In unserem Sample drinnen haben wir 30000 Datensets. Wir rechnen hier von allen die Mittelwerte aus und vergleichen diesen mit dem Originalen.
# Diese zwei stimmen überein. Das ist sehr gut für uns.

sample3.mins = apply(samples3, 1, min)
# Hier rechnen wir uns alle minimum Werte aus.
plotPost(sample3.mins, compVal = min(de$Salary))
# Das haben wir nicht getroffen.
plotPost(sample3.mins, compVal = 0)

sample3.maxs = apply(samples3, 1, max)
plotPost(sample3.maxs, compVal = max(de$Salary))
# Sieht auch nicht gut.

###########Tabs oder Space ################

table(de$TabSpaces)
# wir nehmen einen weiteren Gruppen INtercept mit auf
de$TabSpaces.int= as.integer(de$TabSpaces)


modell4="
model
{
  for(i in 1:590)
  {
  Salary[i]~dnorm(mu[i],1/sigma^2)
  
  mu[i]<-  int.company[CompanySize.int[i]] +
  int.space[TabSpaces.int[i]]+
  beta.year*YearsProgram.num[i]
  }
  
  
  for(i in 1:10)
  {
  int.company[i] ~ dnorm(0,1/100000^2)
  }
  
  for(i in 1:3)
  {
  int.space[i] ~ dnorm(0,1/100000^2)
  }
  #Abschätzung beta.year = sd(de$Salary)/sd/de$YearsProgram.num *001
  beta.year ~ dnorm(0,1/3000^2)
  #Abschätzung: sd(de$Salary)
  sigma ~ dexp(3/25000) #3 ist eine Regel bei der man sagen kann man hat 95% der WErte bei einer exponential verteilung
}
"

fit4=run.jags(modell4, data=de, monitor=c('int.company','int.space','beta.year','sigma'), n.chains = 3)

view(fit4)
diagMCMC(fit4$mcmc, int.space[2])

samples4 = as.matrix(fit4$mcmc)
diff.tab.space = samples4[,'int.space[2]'] - samples4[,'int.space[3]']
plotPost(diff.tab.space, compVal = 0)